{
	"compiler": {
		"version": "0.8.4+commit.c7e474f2"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "approved",
						"type": "bool"
					}
				],
				"name": "ApprovalForAll",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "node",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "label",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "NewOwner",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "node",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "resolver",
						"type": "address"
					}
				],
				"name": "NewResolver",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "node",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "uint64",
						"name": "ttl",
						"type": "uint64"
					}
				],
				"name": "NewTTL",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "node",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "Transfer",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					}
				],
				"name": "isApprovedForAll",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "node",
						"type": "bytes32"
					}
				],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "node",
						"type": "bytes32"
					}
				],
				"name": "recordExists",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "node",
						"type": "bytes32"
					}
				],
				"name": "resolver",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "approved",
						"type": "bool"
					}
				],
				"name": "setApprovalForAll",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "node",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "setOwner",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "node",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "resolver",
						"type": "address"
					},
					{
						"internalType": "uint64",
						"name": "ttl",
						"type": "uint64"
					}
				],
				"name": "setRecord",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "node",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "resolver",
						"type": "address"
					}
				],
				"name": "setResolver",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "node",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "label",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "setSubnodeOwner",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "node",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "label",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "resolver",
						"type": "address"
					},
					{
						"internalType": "uint64",
						"name": "ttl",
						"type": "uint64"
					}
				],
				"name": "setSubnodeRecord",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "node",
						"type": "bytes32"
					},
					{
						"internalType": "uint64",
						"name": "ttl",
						"type": "uint64"
					}
				],
				"name": "setTTL",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "node",
						"type": "bytes32"
					}
				],
				"name": "ttl",
				"outputs": [
					{
						"internalType": "uint64",
						"name": "",
						"type": "uint64"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"constructor": {
					"details": "Constructs a new ENS registrar."
				},
				"isApprovedForAll(address,address)": {
					"details": "Query if an address is an authorized operator for another address.",
					"params": {
						"operator": "The address that acts on behalf of the owner.",
						"owner": "The address that owns the records."
					},
					"returns": {
						"_0": "True if `operator` is an approved operator for `owner`, false otherwise."
					}
				},
				"owner(bytes32)": {
					"details": "Returns the address that owns the specified node.",
					"params": {
						"node": "The specified node."
					},
					"returns": {
						"_0": "address of the owner."
					}
				},
				"recordExists(bytes32)": {
					"details": "Returns whether a record has been imported to the registry.",
					"params": {
						"node": "The specified node."
					},
					"returns": {
						"_0": "Bool if record exists"
					}
				},
				"resolver(bytes32)": {
					"details": "Returns the address of the resolver for the specified node.",
					"params": {
						"node": "The specified node."
					},
					"returns": {
						"_0": "address of the resolver."
					}
				},
				"setApprovalForAll(address,bool)": {
					"details": "Enable or disable approval for a third party (\"operator\") to manage  all of `msg.sender`'s ENS records. Emits the ApprovalForAll event.",
					"params": {
						"approved": "True if the operator is approved, false to revoke approval.",
						"operator": "Address to add to the set of authorized operators."
					}
				},
				"setOwner(bytes32,address)": {
					"details": "Transfers ownership of a node to a new address. May only be called by the current owner of the node.",
					"params": {
						"node": "The node to transfer ownership of.",
						"owner": "The address of the new owner."
					}
				},
				"setRecord(bytes32,address,address,uint64)": {
					"details": "Sets the record for a node.",
					"params": {
						"node": "The node to update.",
						"owner": "The address of the new owner.",
						"resolver": "The address of the resolver.",
						"ttl": "The TTL in seconds."
					}
				},
				"setResolver(bytes32,address)": {
					"details": "Sets the resolver address for the specified node.",
					"params": {
						"node": "The node to update.",
						"resolver": "The address of the resolver."
					}
				},
				"setSubnodeOwner(bytes32,bytes32,address)": {
					"details": "Transfers ownership of a subnode keccak256(node, label) to a new address. May only be called by the owner of the parent node.",
					"params": {
						"label": "The hash of the label specifying the subnode.",
						"node": "The parent node.",
						"owner": "The address of the new owner."
					}
				},
				"setSubnodeRecord(bytes32,bytes32,address,address,uint64)": {
					"details": "Sets the record for a subnode.",
					"params": {
						"label": "The hash of the label specifying the subnode.",
						"node": "The parent node.",
						"owner": "The address of the new owner.",
						"resolver": "The address of the resolver.",
						"ttl": "The TTL in seconds."
					}
				},
				"setTTL(bytes32,uint64)": {
					"details": "Sets the TTL for the specified node.",
					"params": {
						"node": "The node to update.",
						"ttl": "The TTL in seconds."
					}
				},
				"ttl(bytes32)": {
					"details": "Returns the TTL of a node, and any records associated with it.",
					"params": {
						"node": "The specified node."
					},
					"returns": {
						"_0": "ttl of the node."
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"notice": "The ENS registry contract.",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"RemixRegistry.sol": "ENSRegistry"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"ENS.sol": {
			"keccak256": "0x19775de9e6bf2ab5c59311d0f5316ac25dd207dc83733b658d4cc27fb8470f27",
			"license": "MIT",
			"urls": [
				"bzz-raw://6d8c4b1307235db1ba42e5f4c5f513d2fee30d36a2c26fbccec56fa209d0767e",
				"dweb:/ipfs/Qmb6wJVGpC697zAdQrVWusDPG6ByYRFx8Gwih8y29h4cBX"
			]
		},
		"RemixRegistry.sol": {
			"keccak256": "0x5becd60dce3cadd708ea08979acdbaf3b332d5cf43e390fab87d641b8ce1f38b",
			"license": "MIT",
			"urls": [
				"bzz-raw://6787efd5267544dd941d8d4600b2257aa106e66622fa8e6deb08571e86eae20e",
				"dweb:/ipfs/QmaqgGwrwNdZKtXkFFzUMcSQNuAcAvzENoV9tWvYedqajC"
			]
		}
	},
	"version": 1
}